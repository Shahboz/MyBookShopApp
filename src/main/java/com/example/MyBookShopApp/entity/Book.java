package com.example.MyBookShopApp.entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import javax.persistence.*;
import java.util.*;
import java.util.stream.Collectors;


@Entity
@Getter
@Setter
@NoArgsConstructor
@Table(name = "book")
@ApiModel(description = "Data model of book entity")
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @ApiModelProperty(value = "Book id generated by DB", example = "1", required = true, position = 1)
    private Integer id;

    @Column(columnDefinition = "TIMESTAMP WITHOUT TIME ZONE", nullable = false)
    @ApiModelProperty(value = "Publication date", required = true, position = 2)
    private Date pubDate;

    @Column(columnDefinition="SMALLINT", nullable = false)
    @ApiModelProperty(example = "0", required = true)
    private Integer isBestseller;

    @Column(nullable = false)
    @ApiModelProperty(required = true)
    private String slug;

    @Column(nullable = false)
    @ApiModelProperty(required = true)
    private String title;

    private String image;

    @Column(columnDefinition="TEXT")
    private String description;

    @Column(nullable = false)
    @ApiModelProperty(example = "100", required = true)
    private Integer price;

    @Column(columnDefinition="smallint default 0", nullable = false)
    @ApiModelProperty(example = "50", required = true)
    private Integer discount;

    @JsonIgnore
    @OneToMany(mappedBy = "book", cascade = CascadeType.REMOVE)
    private List<AuthorBooks> authorList = new ArrayList<>();

    @JsonIgnore
    @ManyToMany
    @JoinTable(name = "book2genre", joinColumns = @JoinColumn(name = "book_id"), inverseJoinColumns = @JoinColumn(name = "genre_id"))
    private List<Genre> genresList = new ArrayList<>();

    @JsonIgnore
    @ManyToMany
    @JoinTable(name = "book2tag", joinColumns = @JoinColumn(name = "book_id"), inverseJoinColumns = @JoinColumn(name = "tag_id"))
    private List<Tag> tagsList = new ArrayList<>();

    @Column(columnDefinition = "serial default 0")
    @ApiModelProperty(value = "Number of users who bought the book", example = "10")
    private Integer boughtUsers;

    @Column(columnDefinition = "serial default 0")
    @ApiModelProperty(value = "Number of users who have the book in the cart", example = "5")
    private Integer cardUsers;

    @Column(columnDefinition = "serial default 0")
    @ApiModelProperty(value = "Number of users who have a book on hold", example = "6")
    private Integer holdUsers;

    public Book(Integer id, Date pubDate, Integer isBestseller, String slug, String title, String image, String description, Integer price, Integer discount) {
        this.id = id;
        this.pubDate = pubDate;
        this.isBestseller = isBestseller;
        this.slug = slug;
        this.title = title;
        this.image = image;
        this.description = description;
        this.price = price;
        this.discount = discount;
    }

    @JsonIgnore
    public List<Author> getAuthors() {
        return this.authorList.stream().map(AuthorBooks::getAuthor).collect(Collectors.toList());
    }

    @JsonIgnore
    public List<Genre> getGenres() {
        return this.genresList;
    }

    @JsonIgnore
    public List<Tag> getTags() {
        return this.tagsList;
    }

    public void setAuthors(List<Author> authorList) {
        int i = 1;
        for (Author author : authorList) {
            this.authorList.add(new AuthorBooks(this, author, i++));
        }
    }

    public String getAuthorName() {
        if(this.getAuthorList().size() == 0)
            return null;
        this.getAuthorList().sort(Comparator.comparing(AuthorBooks::getSortIndex));
        return this.getAuthorList().get(0).getAuthor().getName() + (this.getAuthorList().size() > 1 ? " и др." : null);
    }

}
